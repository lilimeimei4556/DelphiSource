unit UnitData;
 {*------------------------------------------------------------------------------

   @author  万兴
   @version 2025/03/21 1.0 Initial revision.
   @comment   存储图形数据
   1.共有7种类型的图形，每个图形有4个方块
   数组
   array 0...3 of TPoint    动态数组 TArray<T>       array of T
   泛型  TList<T>
  2. 每个方块又有4对坐标
      TPoint 本身就包含x,y
   每个坐标又需要存储到一个容器中TList<T>
     TList<TList<TPoint>>
 -------------------------------------------------------------------------------}

interface

uses
  System.Generics.Collections, System.Types;

type
  TGameData = class
    class function GetActByIndex(ActIndex: Integer): TList<TPoint>;

  end;

implementation

var
  ActList: TList<TList<TPoint>>; //图形列表
   Points: TList<TPoint>;
{ TGameData }
{*------------------------------------------------------------------------------

   根据索引编号决定是哪种类型的图形
  @param ActIndex   图形编号，0..6
  @return     指定的图形数据
-------------------------------------------------------------------------------}
class function TGameData.GetActByIndex(ActIndex: Integer): TList<TPoint>;
begin
  result := ActList.Items[ActIndex];
end;

initialization
  //创建列表对象
  ActList:= TList<TList<TPoint>>.Create;
  //创建图形数据
  //一字型
  Points:=TList<TPoint>.Create;
   //创建一对坐标，同时将该对坐标存储到 points中
   Points.Add(TPoint.Create(6,0));
   Points.Add(TPoint.Create(7,0));
   Points.Add(TPoint.Create(8,0));
   Points.Add(TPoint.Create(9,0));
   //将图形数据存储到列表中去
   ActList.Add(Points);
   //T字型
  Points:=TList<TPoint>.Create;
   //创建一对坐标，同时将该对坐标存储到 points中
   Points.Add(TPoint.Create(6,0));
   Points.Add(TPoint.Create(7,0));
   Points.Add(TPoint.Create(8,0));
   Points.Add(TPoint.Create(7,1));
   //将图形数据存储到列表中去
   ActList.Add(Points);
end.

